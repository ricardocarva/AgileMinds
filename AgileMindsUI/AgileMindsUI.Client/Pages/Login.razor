@page "/login"
@layout AgileMindsUI.Client.Layout.LoginLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@using AgileMindsUI.Client.Auth
@using Microsoft.AspNetCore.Components.Authorization
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .gradient-text1 {
        font-weight: bold;
        font-size: inherit;
        background: linear-gradient(to top right, #29baf4, #ee40b8); /* Blue to pink */
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-fill-color: transparent;
    }

    .mud-tabs-tabbar {
        position: relative;
        width: 320px;
    }

    .mud-tabs-tabbar, .mud-paper {
        background-color: transparent !important;
    }
</style>

<MudPaper Class="px-6 py-4 ma-2 mx-auto" Elevation="0">
    <MudGrid Justify="Justify.Center">
        <!-- Left side: Introduction Text -->
        <MudItem xs="12" md="3">
            <MudText Class="mb-0" Typo="Typo.h3" GutterBottom="true">
                Welcome to <span class="gradient-text1">SmartSprint</span>
            </MudText>

            <MudText Typo="Typo.h6" Class="my-4">
                <span class="gradient-text1">SmartSprint</span> simplifies project management with easy project, task, and sprint creation.
                Powered by <span class="gradient-text1">AI</span> and integrated with <span class="gradient-text1">Discord</span>, it helps you create tasks faster and manage projects directly from your server.
                Boost your productivity and get started today!
            </MudText>


        </MudItem>

        <!-- Right side: Login and Registration Tabs -->
        <MudItem xs="12" md="3">
            <MudPaper Class="pa-4 mx-auto my-2" MaxWidth="400px" Elevation="0">
                <MudTabs @bind-ActivePanelIndex="@activeTab">
                    <!-- Login Tab -->
                    <MudTabPanel Text="Login">
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
                        }

                        <MudForm @ref="form" Valid="OnValidSubmit" Invalid="OnInvalidSubmit">
                            <MudTextField Style="width: 320px !important;" Label="Username" @bind-Value="loginModel.Username" Required="true" For="@(() => loginModel.Username)" />
                            <MudTextField Style="width: 320px !important;" Label="Password" @bind-Value="loginModel.Password" InputType="@PasswordInput" Required="true" For="@(() => loginModel.Password)" />

                            <MudButton Style="width: 320px !important;" Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitLogin" Disabled="isSubmitting" FullWidth="true">
                                @if (isSubmitting)
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    <span class="mx-2">Logging in...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </MudButton>
                        </MudForm>
                    </MudTabPanel>

                    <!-- Register Tab -->
                    <MudTabPanel Text="Register">
                        @if (!string.IsNullOrWhiteSpace(registerErrorMessage))
                        {
                            <MudAlert Severity="Severity.Error">@registerErrorMessage</MudAlert>
                        }

                        <MudForm @ref="registerForm" Valid="OnValidSubmit" Invalid="OnInvalidSubmit">
                            <MudTextField Style="width: 320px !important;" Label="First Name" @bind-Value="registerModel.FirstName" Required="true" For="@(() => registerModel.FirstName)" />
                            <MudTextField Style="width: 320px !important;" Label="Last Name" @bind-Value="registerModel.LastName" Required="true" For="@(() => registerModel.LastName)" />
                            <MudTextField Style="width: 320px !important;" Label="Username" @bind-Value="registerModel.Username" Required="true" For="@(() => registerModel.Username)" />
                            <MudTextField Style="width: 320px !important;" Label="Password" @bind-Value="registerModel.Password" InputType="@PasswordInput" Required="true" For="@(() => registerModel.Password)" />
                            <MudTextField Style="width: 320px !important;" Label="Confirm Password" @bind-Value="registerModel.ConfirmPassword" InputType="@PasswordInput" Required="true" For="@(() => registerModel.ConfirmPassword)" />

                            <MudButton Class="mt-4" Style="width: 320px !important;" Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitRegistration" Disabled="isSubmitting" FullWidth="true">
                                @if (isSubmitting)
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    <span class="mx-2">Registering...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </MudButton>
                        </MudForm>
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>
@code {
    private MudForm form;
    private MudForm registerForm;
    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage = null;
    private string registerErrorMessage = null;
    private bool isSubmitting = false;
    private int activeTab = 0;
    InputType PasswordInput = InputType.Password;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User?.Identity?.IsAuthenticated ?? false)
            {
                // If user is authenticated, redirect to the home page
                await Task.Delay(200);

                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }

    // Handles the login form submission
    private async Task SubmitLogin()
    {
        isSubmitting = true;
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

                    // store JWT in LocalStorage
                    await LocalStorage.SetItemAsync("authToken", result.Token);

                    // mark user as authenticated
                    await AuthenticationStateProvider.MarkUserAsAuthenticated(result.Token);

                    // show success message and navigate
                    Snackbar.Add("Login successful!", Severity.Success);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Invalid login credentials. Please try again.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
        isSubmitting = false;
    }

    // handles the registration form submission
    private async Task SubmitRegistration()
    {
        isSubmitting = true;
        await registerForm.Validate();

        if (registerForm.IsValid && registerModel.Password == registerModel.ConfirmPassword)
        {
            try
            {
                var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);
                if (response.IsSuccessStatusCode)
                {
                    // automatically log in after registration
                    var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

                    // store JWT in LocalStorage
                    await LocalStorage.SetItemAsync("authToken", result.Token);

                    // mark user as authenticated
                    AuthenticationStateProvider.MarkUserAsAuthenticated(result.Token);

                    // show success message and navigate
                    Snackbar.Add("Registration successful!", Severity.Success);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    registerErrorMessage = "Registration failed. Please try again.";
                }
            }
            catch (Exception ex)
            {
                registerErrorMessage = $"An error occurred: {ex.Message}";
            }
        }
        else
        {
            registerErrorMessage = "Passwords do not match.";
        }

        isSubmitting = false;
    }

    // model for login
    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    // model for registration
    public class RegisterModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }

    // model for the API response
    public class AuthResponse
    {
        public string Token { get; set; }
    }
}
