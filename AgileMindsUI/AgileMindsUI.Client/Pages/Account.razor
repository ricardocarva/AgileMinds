@page "/account"

@* @attribute [Microsoft.AspNetCore.Authorization.Authorize] *@

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@using AgileMinds.Shared.Models
@using AgileMindsUI.Client.Auth
@using AgileMindsUI.Client.Services

<MudPaper Class="px-6 py-4 ma-2" Elevation="4">
    <MudText Typo="Typo.h4">Account</MudText>
    @if (@isLoading)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
    }

    else
    {
        if (!isAuthenticated)
        {
            <MudText Typo="Typo.h6">You are not authenticated. Please <a href="/login">login</a>.</MudText>
        }
        else
        {
            <MudForm>
                <MudTextField @bind-Value="user.Username" Label="Username" Disabled="true" Class="my-2" />
                <MudTextField @bind-Value="user.FirstName" Label="First Name" Class="my-2" />
                <MudTextField @bind-Value="user.LastName" Label="Last Name" Class="my-2" />
                <MudTextField @bind-Value="user.CreatedAt" Label="Created At" Disabled="true" Class="my-2" />

                @if (@isSaving)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        <span class="mx-2">Saving Changes...</span>
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateUserDetails">Save Changes</MudButton>
                }
            </MudForm>
        }

    }
</MudPaper>

@code {
    private string userId = "";
    private User user = new User();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isAuthenticated = false;

    protected override void OnInitialized()
    {
        // Set isLoading to true during SSR
        isLoading = true;
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user?.Identity?.IsAuthenticated ?? false)
                {
                    isAuthenticated = true;

                    // Extract the user ID from the JWT
                    userId = await AuthenticationStateProvider.GetUserIdFromTokenAsync();

                    // Fetch user details from the backend using the userId
                    await LoadUserDetails(userId);
                }
                else
                {
                    isAuthenticated = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Initialization error: {ex.Message}");
                Snackbar.Add("An error occurred while loading the page.", Severity.Error);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
    private async System.Threading.Tasks.Task LoadUserDetails(string userId)
    {
        try
        {
            user = await Http.GetFromJsonAsync<User>($"api/users/{userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async System.Threading.Tasks.Task UpdateUserDetails()
    {
        isSaving = true;

        try
        {
            await Http.PutAsJsonAsync($"api/users/{userId}", user);
            Snackbar.Add("Account details updated!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error updating account details.", Severity.Error);
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();

        }
    }
}
