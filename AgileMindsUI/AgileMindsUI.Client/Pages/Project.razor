@page "/project/{projectId:int}"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject Services.ProjectService ProjectService
@inject IDialogService DialogService
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject SprintService SprintService
@inject TaskStateContainer TaskState
@implements IDisposable

@using AgileMindsUI.Client.Auth
@using Heron.MudCalendar
@using Microsoft.AspNetCore.Components.Authorization
@using AgileMindsUI.Client.Services

<style>
    .mud-input > input.mud-input-root-outlined {
        padding: 14px !important;
    }

    .mud-table-container {
        overflow-y: auto !important;
        max-height: 48vh !important;
    }

    .mud-table-body .mud-table-cell:first-child:hover {
        cursor: pointer !important;
        color: var(--mud-palette-primary-lighten) !important;
    }

    .mud-table-body .mud-table-cell {
        font-size: 0.9rem !important;
        border-bottom: 0px !important;
    }

    .mud-table-cell{
        border-bottom: 0px !important;
    }

    .mud-table-body .mud-table-row:hover {
        color: var(--mud-palette-primary-lighten) !important;
    }


    .custom-loading-color{
        background: linear-gradient(to right, #6629f4, #ee40b8) !important;
    }

    .mud-chip > .mud-chip-content {
        align-items: center;
        display: inline-flex;
        height: 100%;
        max-width: 100%;
        color: whitesmoke;
    }

    .mud-expansion-panel-title {
        background-color: #2e2e2e; /* Darker background for the panel header */
        color: #ffffff; /* White text for better contrast */
    }

    .mud-divider {
        border-top: 2px solid #5a5a5a; /* Slightly lighter color for separation */
    }
 </style>
<PageTitle>@(project?.Name ?? "Loading Project...")</PageTitle>

<MudPaper Class="px-6 py-4 ma-2" Elevation="3">
    @if (@loading)
    {
        <MudText Typo="Typo.h5" GutterBottom="true">Loading @(project?.Name ?? "Project")</MudText>
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />

    }
    else
    {
        <MudText Typo="Typo.h4" GutterBottom="true">@project.Name</MudText>
        <MudText Typo="Typo.body1">@project.Description</MudText>

        <!-- Ask AI Button -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Task" @onclick="OpenCreateTaskDialog" Class="my-2 mr-2">Create Task</MudButton>

        <!-- Create Sprint Button, only enabled if no sprint exists -->
        <MudTooltip Text="@(loading || OpenSprint != null ? "Cannot create a new sprint while there is an open sprint." : null)" Color="Color.Warning" Placement="Placement.Top">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ReplayCircleFilled" @onclick="OpenCreateSprintDialog" Class="my-2 mr-2" Disabled="@(loading || OpenSprint != null)">Create Sprint</MudButton>
        </MudTooltip>
        <!-- Add Member Button -->
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Person" @onclick="OpenAddMemberDialog" Class="my-2 mr-2">Add Member</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.QuestionAnswer" @onclick="OpenSuggestionAIDialog" Class="my-2 mr-2">Ask AI</MudButton>

        <!-- Create Task Button -->
            @if (loadingTasks)

        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        }
        else{
        <MudTabs>
            <MudTabPanel Text="Sprints">
                <MudPaper Class="pa-2 ma-2" Elevation="0">
                    <MudText Typo="Typo.h6">Sprints</MudText>
                        @if (OpenSprint != null)
                        {
                            @if (!OpenSprint.IsStarted)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="StartOpenSprint">Start Sprint</MudButton>
                            }
                            else if (OpenSprint.IsStarted && !OpenSprint.IsCompleted)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="CompleteOpenSprint">Complete Sprint</MudButton>
                            }

                            <!-- Display Open Sprint Details -->
                            <MudPaper Class="pa-4 my-2" Elevation="2" Outlined="true">
                                <MudText Typo="Typo.body1">@OpenSprint.Name</MudText>
                                <MudText Typo="Typo.caption">@OpenSprint.StartDate.ToString("dd MMM yyyy") - @OpenSprint.EndDate.ToString("dd MMM yyyy")</MudText>


                                <MudExpansionPanels>
                                    <MudExpansionPanel Text="Tasks in This Sprint" Class="mud-expansion-panel-title" >
                                        <Tasks ProjectId="ProjectId"
                                               OpenSprint="OpenSprint"
                                               ShowTasksInSprint="true"
                                               LoadSprints="LoadSprints"
                                               LoadMembers="LoadMembers"
                                               LoadOpenSprint="LoadOpenSprint"
                                               Http="Http"
                                               Snackbar="Snackbar"
                                               ProjectService="ProjectService"
                                               DialogService="DialogService"
                                               loadingTasks="loadingTasks" />
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            </MudPaper>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No sprints created yet.</MudText>
                        }
                    <MudDivider />
                        <MudPaper Class="pa-4 my-2" Elevation="2" Outlined="true">

                        <MudExpansionPanels >
                            <MudExpansionPanel Text="Tasks Not On Sprint" Class="mud-expansion-panel-title">
                                        <Tasks ProjectId="ProjectId"
                                            OpenSprint="OpenSprint"
                                            ShowTasksInSprint="false"
                                            LoadSprints="LoadSprints"
                                            LoadMembers="LoadMembers"
                                            LoadOpenSprint="LoadOpenSprint"
                                            Http="Http"
                                            Snackbar="Snackbar"
                                            ProjectService="ProjectService"
                                            DialogService="DialogService"
                                           loadingTasks="loadingTasks" />
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudPaper>
                </MudPaper>

          </MudTabPanel>

            <MudTabPanel Text="Tasks">
                    <Tasks ProjectId="ProjectId"
                           OpenSprint="OpenSprint"
                           ShowTasksInSprint="false"
                           LoadSprints="LoadSprints"
                           LoadMembers="LoadMembers"
                           LoadOpenSprint="LoadOpenSprint"
                           Http="Http"
                           Snackbar="Snackbar"
                           ProjectService="ProjectService"
                           DialogService="DialogService"
                           loadingTasks="loadingTasks" />
            </MudTabPanel>
                <MudTabPanel Text="Calendar">
                    <h2>Calendar</h2>
                    <MudCalendar Items="_events" />

                </MudTabPanel>
                <MudTabPanel Text="Kanban">
                    <MudDropContainer T="AgileMinds.Shared.Models.Task"
                                      @ref="_dropContainer"
                                      Items="@TaskState.Tasks"
                                      ItemsSelector="@((item, column) => item.Status.ToString() == column)"
                                      ItemDropped="TaskUpdated"
                                      Class="d-flex flex-row mud-height-full mud-width-full flex-grow-1">
                        <ChildContent>
                            @foreach (var item in _sections)
                            {
                                <MudPaper Elevation="0"
                                          Width="224px"
                                          MinHeight="400px"
                                          Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg flex-grow-1">
                                    <MudToolBar Gutters="false">
                                        <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                                        <MudSpacer />
                                    </MudToolBar>
                                    <MudDropZone T="AgileMinds.Shared.Models.Task" Identifier="@item.Name" Class="mud-height-full flex-grow-1" />
                                </MudPaper>
                            }
                        </ChildContent>
                        <ItemRenderer>
                            <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
                                @context.Name
                            </MudPaper>
                        </ItemRenderer>
                    </MudDropContainer>
                </MudTabPanel>
            <MudTabPanel Text="Members">
                <MudPaper Class="pa-2 ma-2" Elevation="0">
                    <MudText Typo="Typo.h6">Members</MudText>
                    @if (members != null && members.Count > 0)
                    {
                        @foreach (var member in members)
                        {
                            <MudChip T="string" Color="Color.Dark">@member.Username</MudChip>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">No members added yet.</MudText>
                    }
                </MudPaper>
            </MudTabPanel>

        </MudTabs>
        }
    }
</MudPaper>


@code {
    [Parameter] public int ProjectId { get; set; }
    [Parameter]
    public EventCallback<bool> OnSprintAdded { get; set; }

    [Parameter]
    public EventCallback OnOpenSuggestionAIDialog { get; set; }

    [Parameter]
    public EventCallback OnOpenCreateTaskDialog { get; set; }

    [Parameter]
    public AgileMinds.Shared.Models.Project? project { get; set; } = new AgileMinds.Shared.Models.Project();

    private List<AgileMinds.Shared.Models.User> members = new List<AgileMinds.Shared.Models.User>();
    private List<AgileMinds.Shared.Models.Sprint> sprints = new List<AgileMinds.Shared.Models.Sprint>();
    private bool loading { get; set; } = false;
    private bool loadingTasks { get; set; } = false;
    private int userID { get; set; }
    private string sprintName  = string.Empty;
    private AgileMinds.Shared.Models.Sprint? OpenSprint { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProjectService == null || Http == null)
        {
            Snackbar.Add("Error: Services are not initialized.", Severity.Error);
            return;
        }

        loading = true;
        userID = await GetCurrentUserId();
        project = await ProjectService.FetchProjectById(ProjectId);

        if (project == null)
        {
            Snackbar.Add("Project not found.", Severity.Error);
            return;
        }

        // Use the tasks state manager to load tasks
        await TaskState.LoadTasks(ProjectId, Http);

        // Subscribe to state changes
        TaskState.OnChange += StateHasChanged;

        var loadMembers = LoadMembers();
        var loadOpenSprint = LoadOpenSprint(ProjectId);
        await Task.WhenAll(loadMembers, loadOpenSprint);

        loading = false;
        StateHasChanged();
    }
    public void Dispose()
    {
        TaskState.OnChange -= StateHasChanged;
    }

    private async Task<int> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(claim => claim.Type == "userid");
        return int.Parse(userIdClaim?.Value ?? "0");
    }

    private async Task LoadProjectDetails()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<AgileMinds.Shared.Models.Project>($"api/projects/{ProjectId}");
            if (response != null)
            {
                project = response;
            }
            else
            {
                Snackbar.Add("Project not found.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading project: {ex.Message}", Severity.Error);
        }
    }
    private async Task LoadMembers()
    {
        try
        {
            members = await Http.GetFromJsonAsync<List<AgileMinds.Shared.Models.User>>($"api/projects/{ProjectId}/members");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading members: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadSprints()
    {
        try
        {
            OpenSprint = await SprintService.GetOpenSprint(ProjectId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading sprints: {ex.Message}", Severity.Error);
        }
    }

    private void OpenAddMemberDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId);
        parameters.Add("InvitorUserID", userID);

        DialogOptions options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false
            };

        DialogService.Show<Components.AddMemberDialog>("Add New Member", parameters, options);
        StateHasChanged();
    }

    private void OpenCreateSprintDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId );
        parameters.Add("OnSprintAdded", EventCallback.Factory.Create<bool>(this, ReloadSprints));

        DialogService.Show<Components.AddSprintDialog>("Create New Sprint", parameters);
        StateHasChanged();

    }

    private async Task LoadOpenSprint(int projectId)
    {
        try
        {
            OpenSprint = await SprintService.GetOpenSprint(projectId);
            StateHasChanged(); // Force UI to update based on new sprint state
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading open sprint: {ex.Message}", Severity.Error);
        }
    }

    private async Task StartOpenSprint()
    {
        if (OpenSprint != null && !OpenSprint.IsStarted)
        {
            var result = await SprintService.StartSprint(OpenSprint.Id);
            if (result)
            {
                await LoadOpenSprint(OpenSprint.ProjectId);
            }
        }
    }

    private async Task CompleteOpenSprint()
    {
        if (OpenSprint != null && OpenSprint.IsStarted && !OpenSprint.IsCompleted)
        {
            var result = await SprintService.CompleteSprint(OpenSprint.Id);
            if (result)
            {
                await LoadOpenSprint(OpenSprint.ProjectId);
            }
        }
    }

    private void OpenSuggestionAIDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ProjectId", ProjectId);
        parameters.Add("ProjectDescription", project.Description);

        DialogOptions options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                BackdropClick = false
            };

        DialogService.Show<Components.SuggestionAI>("Ask AI", parameters, options);
        StateHasChanged();

    }
    private void OpenCreateTaskDialog()
    {
        var parameters = new DialogParameters
    {
        { "ProjectId", ProjectId },
        { "OpenSprint", OpenSprint }
    };

        DialogService.Show<Components.AddTaskDialog>("Create Task", parameters);
        StateHasChanged();

    }
    private async Task ReloadSprints(bool sprintAdded = true)
    {
        if (sprintAdded)
        {
            await LoadSprints();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task UpdateTask(AgileMinds.Shared.Models.Task task)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/projects/{ProjectId}/tasks/{task.Id}", task);
            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add("Failed to update task.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating task: {ex.Message}", Severity.Error);
        }
    }



      //calendar
    private List<CalendarItem> _events = new()
    {
        new CalendarItem
        {
            @* Start = DateTime.Today.AddHours(10),
            End = DateTime.Today.AddHours(11),
            Text = "Event today" *@
        },
        new CalendarItem
        {
            @* Start = DateTime.Today.AddDays(1).AddHours(11),
            End = DateTime.Today.AddDays(1).AddHours(12.5),
            Text = "Event tomorrow" *@
        }
    };


    private MudDropContainer<AgileMinds.Shared.Models.Task> _dropContainer;


    private List<KanBanSections> _sections = new()
    {
        new KanBanSections("Pending"),
        new KanBanSections("InProgress"),
        new KanBanSections("Completed"),
    };

    public class KanBanSections
    {
        public string Name { get; init; }

        public KanBanSections(string name) => Name = name;

        public override bool Equals(object obj)
        {
            return obj is KanBanSections sections && Name == sections.Name;
        }
    }

    private async Task TaskUpdated(MudItemDropInfo<AgileMinds.Shared.Models.Task> info)
    {
        switch (info.DropzoneIdentifier)
        {
            case "Pending":
                info.Item.Status = AgileMinds.Shared.Models.TaskStatus.Pending;
                break;
            case "InProgress":
                info.Item.Status = AgileMinds.Shared.Models.TaskStatus.InProgress;
                break;
            case "Completed":
                info.Item.Status = AgileMinds.Shared.Models.TaskStatus.Completed;
                break;
        }

        _dropContainer.Refresh();

        // Update database
        var response = await Http.PutAsJsonAsync($"api/projects/{ProjectId}/tasks/{info.Item.Id}", info.Item);

        if (response.IsSuccessStatusCode)
        {
            // Update the task in the shared state
            TaskState.AddOrUpdateTask(info.Item);
        }
        else
        {
            Snackbar.Add("Failed to update task status.", Severity.Error);
        }
    }

}

