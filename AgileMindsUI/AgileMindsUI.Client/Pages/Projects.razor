@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject Services.ProjectService ProjectService
@inject NavigationManager Navigation

@page "/projects"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@using AgileMindsUI.Client.Auth
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Projects</PageTitle>
@* <MudProgressLinear Color="Color.Tertiary" Size="Size.Large" Value="@xpToLvl" Class="ma-2" Style="width:auto !important;" />
 *@

 <style>

    .mud-table-row:hover .mud-table-cell {
        cursor: pointer !important;
        color: var(--mud-palette-primary-lighten) !important;
    }

    .mud-table-body .mud-table-cell{
        font-size: 0.9rem !important;
        border-bottom: 0px!important;
    }

    .mud-table-cell {
        border-bottom: 0px !important;
    }


    .custom-loading-color {
        background: linear-gradient(to right, #6629f4, #ee40b8) !important;
    }

    .gradient-text1 {
        font-weight: bold;
        background: linear-gradient(to top right, #29baf4, #ee40b8); /* Blue to pink */
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-fill-color: transparent;
    }

 </style>
@if (!loading && !@showProjectForm && projects.Count == 0)
{
    <MudPaper Class="px-6 py-4 ma-2" Elevation="3" >
        <MudText Typo="Typo.h4" GutterBottom="true">Create a new project</MudText>
        <MudText Typo="Typo.body1" GutterBottom="true">
            Use this page to create a new project. <br />
            Once your project is created, invite members to join and collaborate.<br />
        </MudText>

        <MudButton Class="mt-4" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" @onclick="CreateNewProject">Create New Project</MudButton>
    </MudPaper>
}
else
{
    @if (@showProjectForm)
    {
        <MudPaper Class="px-6 py-4 ma-2" Elevation="3">
            @if (!@loading)
            {
                <MudText Typo="Typo.h4" GutterBottom="true">Project Details</MudText>
                <MudTextField Label="Project Name" @bind-Value="name" @oninput="OnInputChanged" Required="true" />
                <br />
                <MudTextField Label="Project Descripion" @bind-Value="description" />
                <br />
                <MudSwitch T="bool" Label="Gameify Project" @bind-Value="gameifyProject" Color="Color.Primary" />
                <MudSwitch T="bool" Label="Discord Bot Integration" @bind-Value="botIntegration" Color="Color.Secondary" />
                <MudSwitch T="bool" Label="Canvas Integration" @bind-Value="canvasIntegration" Color="Color.Tertiary" />

                <MudButton Class="my-4" Color="Color.Primary" Variant="Variant.Filled" Disabled="IsSubmitDisabled" @onclick="HandleSubmit">
                    Create Project
                </MudButton>

                <MudDivider Class="my-4" />
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Color="Color.Secondary" @onclick="CancelNewProject">Cancel</MudButton>
            }
            else
            {
                <MudText Typo="Typo.h4" GutterBottom="true">Building Your New Project</MudText>
                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    }
    else
    {
        <MudPaper Class="px-6 py-4 ma-2" Elevation="3">
            <MudText Typo="Typo.h4" GutterBottom="true"><span class="">Projects</span></MudText>

            @if (@loading)
            {
                <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />

            }
            else
            {
                <MudButton Color="Color.Primary"
                            Variant="Variant.Filled"
                            StartIcon="@Icons.Material.Filled.CreateNewFolder"
                            @onclick="CreateNewProject" Class="mb-2">
                    Create New Project
                </MudButton>

                <MudDivider Class="my-4" />

                <MudGrid Justify="Justify.SpaceBetween" Style="align-items:center;">
                    <MudItem xs="5">
                        <MudTextField T="string"
                                      Label="Search projects"
                                      @bind-Value="searchTerm"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Class="mb-0"
                                      DebounceInterval="400"
                                      Clearable="true"
                                      Style="padding-top: 0px !important;" />
                    </MudItem>
                    <MudItem>
                        <MudButton Color="Color.Dark"
                                   Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   @onclick="(async(e) => await ReloadProjects())"
                                   Style="padding-right: 4px !important;" />
                        @*  <MudButton Color="Color.Dark"
            Variant="Variant.Filled"
            StartIcon="@Icons.Material.Filled.Add"
            @onclick="(async(e) => await ReloadTasks(true))"
            Style="padding-right: 4px !important;" /> *@
                    </MudItem>
                </MudGrid>

                <MudTable Items="@filteredProjects" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Created At</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="context">
                        <MudTd DataLabel="Name" @onclick="() => NavigateToProject(context)" Style="width:20% !important;">
                            @context.Name
                        </MudTd>
                        <MudTd DataLabel="Description" @onclick="() => NavigateToProject(context)">@context.Description</MudTd>
                        <MudTd DataLabel="Created At" Style="width:10% !important;" @onclick="() => NavigateToProject(context)">@context.CreatedAt.ToString("yyyy-MM-dd")</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                    </PagerContent>
                </MudTable>
            }
        </MudPaper>
    }
}

@code {
    private string userId = "";
    private string name = "";
    private string description = "";
    private bool showProjectForm { get; set; } = false;
    private bool gameifyProject { get; set; } = false;
    private bool botIntegration { get; set; } = false;
    private bool canvasIntegration { get; set; } = false;
    private bool loading { get; set; } = false;
    private int xpToLvl = 0;
    private System.Timers.Timer? debounceTimer;
    private string searchTerm = string.Empty;

    private List<AgileMinds.Shared.Models.Project> projects = new List<AgileMinds.Shared.Models.Project>();
    private List<AgileMinds.Shared.Models.Notification> notifications = new List<AgileMinds.Shared.Models.Notification>();

    private List<AgileMinds.Shared.Models.Project> filteredProjects => string.IsNullOrEmpty(searchTerm)
       ? projects
       : projects.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated ?? false)
        {
            userId = await AuthenticationStateProvider.GetUserIdFromTokenAsync();

            if (!string.IsNullOrEmpty(userId))
            {
                await FetchProjects(userId);
            }
            else
            {
                Snackbar.Add("Failed to fetch user ID.", Severity.Error);
                loading = false;
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
            Snackbar.Add("User not logged in.", Severity.Error);
        }

        loading = false;
    }

    private async Task ReloadProjects()
    {
        await FetchProjects(userId);
        StateHasChanged();
    }


    private void NavigateToProject(AgileMinds.Shared.Models.Project project)
    {
        ProjectService.SetSelectedProject(project);
        Navigation.NavigateTo($"/project/{project.Id}");
    }

    private async Task FetchProjects(string userId)
    {
        try
        {
            loading = true;
            string apiUrl = $"api/projects/user/{userId}";
            projects = await Http.GetFromJsonAsync<List<AgileMinds.Shared.Models.Project>>(apiUrl) ?? new List<AgileMinds.Shared.Models.Project>();
            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load projects.", Severity.Error);
        }
    }

    private void CreateNewProject()
    {
        showProjectForm = true;
    }

    private void CancelNewProject()
    {
        showProjectForm = false;
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        debounceTimer?.Stop();
        debounceTimer = new System.Timers.Timer(1000);
        debounceTimer.Elapsed += async (sender, args) => await OnDebouncedInput();
        debounceTimer.AutoReset = false;
        debounceTimer.Start();
    }

    private async Task OnDebouncedInput()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return;
        }

        loading = true;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        var msg = projects.Count == 0 ? $"New Project: {name} Created. +25xp!! For creating your first project!" : $"New Project: {name} Created";
        Snackbar.Add(msg, Severity.Success);

        await MakeNewProject(name, description, gameifyProject, botIntegration, canvasIntegration, int.Parse(userId));

        ResetState();
        loading = false;
    }

    private void ResetState()
    {
        name = "";
        description = "";
        showProjectForm = false;
        gameifyProject = false;
        botIntegration = false;
        canvasIntegration = false;
    }

    private async Task MakeNewProject(string name, string description, bool gameify, bool discord, bool canvas, int createdBy)
    {
        string apiUrl = "api/projects";
        var newProject = new AgileMinds.Shared.Models.Project
        {
            Name = name,
            Description = description,
            GameifiedApp = gameify,
            DiscordIntegration = discord,
            CanvasIntegration = canvas,
            CreatedAt = DateTime.UtcNow,
            CreatedBy = createdBy
        };

        HttpResponseMessage response = await Http.PostAsJsonAsync(apiUrl, newProject);

        if (response.IsSuccessStatusCode)
        {
            var createdProject = await response.Content.ReadFromJsonAsync<AgileMinds.Shared.Models.Project>();
            projects.Add(createdProject);

            if (projects.Count == 1)
            {
                xpToLvl = 25;
            }

            StateHasChanged();

            await FetchProjects(userId);
        }
        else
        {
            Snackbar.Add("Error creating project.", Severity.Error);
        }
    }

    private bool IsSubmitDisabled => string.IsNullOrWhiteSpace(name);
}
