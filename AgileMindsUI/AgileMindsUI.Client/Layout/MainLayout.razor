@inherits LayoutComponentBase
@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject Services.ProjectService ProjectService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@* @attribute [Microsoft.AspNetCore.Authorization.Authorize] *@

@using AgileMindsUI.Client.Auth
@using AgileMindsUI.Client.Services
@using AgileMinds.Shared.Models
@* @using Microsoft.AspNetCore.Components.Authorization *@

@using System.Security.Claims
@using System.Threading.Tasks

<style>
    .mud-table-bordered .mud-table-container .mud-table-root .mud-table-body .mud-table-row .mud-table-cell:not(:last-child) {
        border-right: 0px !important;
    }

    .pointer-hover {
        cursor: pointer;
    }

    .gradient-text {
        font-weight: bold;
        font-size: 24px; /* Adjust the size as per your design */
        background: linear-gradient(to top right, #29baf4, #ee40b8); /* Blue to pink */
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-fill-color: transparent;
    }
</style>
<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.Large" />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudImage Src="/ss-small.png" Alt="SmartSprint Logo" Elevation="25" Class="rounded-lg mr-1" Style="width: 30px !important; height: 30px !important;" />

        <MudText Typo="Typo.h5" Class="ml-1 gradient-text">SmartSprint</MudText>
        <MudSpacer />
        @if (notifications.Count > 0)
        {
            <MudBadge Content="@notifications.Count" Color="Color.Primary" Overlap="true" Class="mx-6 my-4 pointer-hover">
                <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Secondary" @onclick="NavToNotifications" />
            </MudBadge>

        }
        else
        {
            <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mx-6 my-4 pointer-hover" Color="Color.Inherit" @onclick="NavToNotifications" />
        }

        @if (authUser?.Identity?.IsAuthenticated ?? false)
        {
            <MudAvatar Color="Color.Primary">@($"{user.FirstName?.Substring(0, 1)?.ToUpper()}{user.LastName?.Substring(0, 1)?.ToUpper()}")</MudAvatar>

        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToLogin">Login</MudButton>
        }

        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            @if (authUser?.Identity?.IsAuthenticated ?? false)
            {
                <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
            }
            else
            {
                <MudMenuItem OnClick="NavigateToLogin">Login</MudMenuItem>
            }
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>

</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>

@code {

    private int userID { get; set; }
    private string name = "";
    private string description = "";
    private bool showProjectForm { get; set; } = false;
    private bool gameifyProject { get; set; } = false;
    private bool botIntegration { get; set; } = false;
    private bool canvasIntegration { get; set; } = false;
    private int xpToLvl = 0;
    private System.Timers.Timer? debounceTimer;
    private UserStats userStats = new UserStats();

    private List<Project> projects = new List<Project>();
    private List<Notification> notifications = new List<Notification>();
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private ClaimsPrincipal authUser;
    private User user = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateAuthUserDetails();
        }
    }

    private async System.Threading.Tasks.Task UpdateAuthUserDetails()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        authUser = user;

        if (user?.Identity?.IsAuthenticated ?? false)
        {

            var userIdClaim = user.FindFirst(claim => claim.Type == "userid");
            userID = int.Parse(userIdClaim?.Value ?? "0");

            userStats = new UserStats
                {
                    Level = 5,  // For example
                    BadgeUrl = "https://example.com/badge.png",
                    Titles = new List<string> { "Champion", "Explorer" }
                };

            // setup fresh on notification update
            NotificationService.OnNotificationUpdated += RefreshNotifications;
            var fetchNotifications = FetchNotifications(userID);

            var loadUserDetails =  LoadUserDetails(userID);
            await System.Threading.Tasks.Task.WhenAll(fetchNotifications, loadUserDetails);
            StateHasChanged();

        }
        else
        {
            user = new();
            NavigateToLogin();

        }
    }

    public async void RefreshNotifications()
    {
        await FetchNotifications(userID);
        StateHasChanged();
    }

    public void Dispose()
    {
        NotificationService.OnNotificationUpdated -= RefreshNotifications;
    }

    private void NavToNotifications()
    {
        Navigation.NavigateTo("/notifications");
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async System.Threading.Tasks.Task Logout()
    {

        await ((JwtAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login", true);
        authUser = new ClaimsPrincipal();
        StateHasChanged();
    }

    private async System.Threading.Tasks.Task LoadUserDetails(int userId)
    {
        try
        {
            user = await Http.GetFromJsonAsync<User>($"api/users/{userId}") ?? new User();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load user details.", Severity.Error);
        }
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
            TableStriped = "rgba(241, 241, 241, 0.6)"
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
            TableStriped = "rgb(44, 44, 61)"
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Filled.WbSunny,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async System.Threading.Tasks.Task FetchNotifications(int userId)
    {
        try
        {
            string apiUrl = $"api/notifications/user/{userId}";
            var response = await Http.GetFromJsonAsync<List<Notification>>(apiUrl) ?? new List<Notification>();

            notifications = response;
            StateHasChanged();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load notifications.", Severity.Error);
        }
    }
}