@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SprintService SprintService
@inject TaskStateContainer TaskState
@inject SprintStateContainer SprintState

@inject Auth.JwtAuthenticationStateProvider AuthenticationStateProvider
@using MudBlazor
@using MudBlazor.Services
@using AgileMindsUI.Client.Services

<style>
    .dialog-background-title {
        background: rgba(var(--mud-palette-info-lighten-r), var(--mud-palette-info-lighten-g), var(--mud-palette-info-lighten-b), 0.5);
/*         color: var(--mud-palette-white); */
        padding: 8px 16px;
        font-weight: bold;
        border-bottom: 1px solid rgba(var(--mud-palette-info-dark-r), var(--mud-palette-info-dark-g), var(--mud-palette-info-dark-b), 0.2);
    }

    .dialog-background-surface {
        background: rgba(var(--mud-palette-surface-r), var(--mud-palette-surface-g), var(--mud-palette-surface-b), 0.75);
        padding: 16px;
        border-radius: 8px;
    }
</style>

<MudDialog TitleClass="dialog-background-title" ContentClass="dialog-background-surface">
    <TitleContent>Create New Sprint</TitleContent>
    <DialogContent>
        <MudTextField Label="Sprint Name" @bind-Value="SprintName" FullWidth="true" Variant="Variant.Outlined" Class="mb-4" />
        <MudDatePicker Label="Start Date" @bind-Date="SprintStartDate" Class="mb-4" IsDateDisabledFunc="@((DateTime dt) => (dt < DateTime.Today))" />
        <MudDatePicker Label="End Date" @bind-Date="SprintEndDate" Class="mb-4" IsDateDisabledFunc="@((DateTime dt) => (dt < SprintStartDate || dt < DateTime.Today))" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CreateSprint" Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Button">Create</MudButton>
        <MudButton OnClick="CancelDialog" Color="Color.Secondary" Variant="Variant.Outlined" ButtonType="ButtonType.Button">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int ProjectId { get; set; }

    private AgileMinds.Shared.Models.Project SprintProject { get; set; }

    [Parameter]
    public int? SprintId { get; set; }

    [Parameter]
    public AgileMinds.Shared.Models.Sprint Sprint { get; set; }

    private string SprintName = string.Empty;


    private DateTime? SprintStartDate { get; set; }
    private DateTime? SprintEndDate { get; set; }

    public virtual ICollection<AgileMinds.Shared.Models.Task> SprintTasks { get; set; }

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    private async Task CreateSprint()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(claim => claim.Type == "userid");

        if (string.IsNullOrWhiteSpace(SprintName))
        {
            Snackbar.Add("Please provide a sprint name.", Severity.Error);
            return;
        }

        if (!SprintStartDate.HasValue || !SprintEndDate.HasValue)
        {
            Snackbar.Add("Please provide both start and end dates.", Severity.Error);
            return;
        }

        if (SprintEndDate.Value < SprintStartDate.Value)
        {
            Snackbar.Add("End date must be after the start date.", Severity.Error);
            return;
        }

        var newSprint = new AgileMinds.Shared.Models.SprintDto
        {
            Name = SprintName,
            StartDate = SprintStartDate.Value,
            EndDate = SprintEndDate.Value,
            ProjectId = ProjectId,
            Tasks = []
        };

        try
        {
            // Attempt to create the sprint
            var (success, errorMessage) = await SprintService.CreateSprint(ProjectId, newSprint);

            if (success)
            {
                Snackbar.Add($"Sprint '{SprintName}' created successfully!", Severity.Success);
                await SprintState.LoadSprints(ProjectId);
                await TaskState.LoadTasks(ProjectId);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                // Show specific error message returned from the server
                Snackbar.Add(errorMessage ?? "Failed to create sprint. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving sprint: {ex.Message}", Severity.Error);
        }
    }

    private void CancelDialog()
    {
        MudDialog.Close(DialogResult.Ok(false));
    }
}