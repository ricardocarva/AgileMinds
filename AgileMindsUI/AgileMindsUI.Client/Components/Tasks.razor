@using AgileMindsUI.Client.Auth
@inject SprintService SprintService
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject TaskStateContainer TaskState
@inject SprintStateContainer SprintState

@implements IDisposable
<MudPaper Class="pa-2 ma-2" Elevation="0">
    @if (loadingTasks)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
    else
    {
        @if (filteredTasks != null && filteredTasks.Count > 0)
        {
            <MudGrid Justify="Justify.SpaceBetween" Style="align-items:center;">
                <MudItem xs="5">
                    <MudTextField T="string"
                                  Label="Search tasks"
                                  @bind-Value="searchTerm"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="mb-0"
                                  DebounceInterval="400"
                                  Clearable="true"
                                  Style="padding-top: 0px !important;" />
                </MudItem>
                <MudItem>
                    <MudButton Color="Color.Dark"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               @onclick="@(async (e) => await ReloadTasks(true))"
                               Style="padding-right: 4px !important;" />
                </MudItem>
            </MudGrid>
            <MudTable Items="@filteredTasks" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Owner</MudTh>
                    <MudTh>Priority</MudTh>
                    <MudTh>Due Date</MudTh>
                </HeaderContent>
                <RowTemplate Context="context">
                    <MudTd DataLabel="ID" @onclick="@(async () => await OnTaskRowClicked(context))">@context.Id</MudTd>
                    <MudTd DataLabel="Name" @onclick="@(async () => await OnTaskRowClicked(context))">
                        @context.Name
                    </MudTd>
                    <MudTd DataLabel="Status" @onclick="@(async () => await OnTaskRowClicked(context))">
                        <MudChip T="string" Style="@GetStatusStyle(context.Status.ToString())">@context.Status.ToString()</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Owner" @onclick="@(async () => await OnTaskRowClicked(context))">
                        @if (context.AssignedUser != null && !string.IsNullOrEmpty(context.AssignedUser.Username))
                        {
                            @context.AssignedUser.Username
                        }
                        else
                        {
                            <i></i>
                        }
                    </MudTd>
                    <MudTd DataLabel="Priority" @onclick="@(async () => await OnTaskRowClicked(context))">
                        @TaskPriorities.FirstOrDefault(x => x.Value == context.Priority).Key
                    </MudTd>
                    <MudTd DataLabel="Due Date" @onclick="@(async () => await OnTaskRowClicked(context))">@context.DueDate?.ToString("yyyy-MM-dd")</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100, int.MaxValue }" />
                </PagerContent>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body2">No tasks created yet.</MudText>
        }
    }
</MudPaper>

@code {
    public List<AgileMinds.Shared.Models.Task> filteredTasks => string.IsNullOrEmpty(searchTerm)
        ? (ShowTasksInSprint ? tasksInSprint : tasksNotOnSprint)
        : (ShowTasksInSprint ? tasksInSprint : tasksNotOnSprint)
            .Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

    private List<AgileMinds.Shared.Models.Task> tasksInSprint = new List<AgileMinds.Shared.Models.Task>();
    private List<AgileMinds.Shared.Models.Task> tasksNotOnSprint = new List<AgileMinds.Shared.Models.Task>();

    public string searchTerm = string.Empty;
    // Parameters coming from the parent  (Methods in this case)
    [Parameter] public int ProjectId { get; set; }


    // These parameters are passed from the parent to replace injected services
    [Parameter] public HttpClient Http { get; set; }
    [Parameter] public ISnackbar Snackbar { get; set; }
    [Parameter] public Services.ProjectService ProjectService { get; set; }
    [Parameter] public IDialogService DialogService { get; set; }
    [Parameter]
    public bool ShowTasksInSprint { get; set; } = false;
    [Parameter] public AgileMinds.Shared.Models.Project? Project { get; set; }
    [Parameter] public List<AgileMinds.Shared.Models.ProjectMember> Members { get; set; }

    [Parameter] public bool loadingTasks { get; set; }

    private bool _initialized = false;
    private AgileMinds.Shared.Models.Sprint? _previousOpenSprint;

    protected override void OnInitialized()
    {
        TaskState.OnChange += StateHasChanged;
        SprintState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        TaskState.OnChange -= StateHasChanged;
        SprintState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!_initialized)
        {
            loadingTasks = true;
            TaskState.OnChange += OnTaskStateChanged;

            _initialized = true;
        }

        // Check if OpenSprint has changed
        if (_previousOpenSprint != SprintState.OpenSprint)
        {
            _previousOpenSprint = SprintState.OpenSprint;
        }
        UpdateTaskLists();

        loadingTasks = false;
    }

    private void OnTaskStateChanged()
    {
        UpdateTaskLists();
        StateHasChanged();
    }

    private void UpdateTaskLists()
    {
        if (SprintState.OpenSprint != null)
        {
            tasksInSprint = TaskState.Tasks
                .Where(t => t.SprintId.HasValue && t.SprintId.Value == SprintState.OpenSprint.Id)
                .ToList();
            tasksNotOnSprint = TaskState.Tasks
                .Where(t => !t.SprintId.HasValue)
                .ToList();
        }
        else
        {
            tasksInSprint = new List<AgileMinds.Shared.Models.Task>();
            tasksNotOnSprint = TaskState.Tasks
                .Where(t => !t.SprintId.HasValue)
                .ToList();
        }
    }



    private async Task ReloadTasks(bool taskAdded = true)
    {
        try
        {
            loadingTasks = true;

            if (taskAdded)
            {
                var newTask = TaskState.Tasks.LastOrDefault();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error reloading tasks: {ex.Message}", Severity.Error);
        }
        finally
        {
            loadingTasks = false;
            StateHasChanged(); // Ensure the UI is updated
        }
    }

    public void OpenCreateTaskDialog()
    {
        var parameters = new DialogParameters
        {
            { "ProjectId", ProjectId },
            { "OpenSprint", SprintState.OpenSprint }
        };

        DialogService.Show<Components.AddTaskDialog>("Create Task", parameters);
    }

    public void OpenEditTaskDialog(AgileMinds.Shared.Models.Task task)
    {
        var parameters = new DialogParameters
        {
            { "Task", task },
            { "ProjectId", ProjectId },
            { "OpenSprint", SprintState.OpenSprint },
        };

        var options = new DialogOptions { CloseButton = true, FullWidth = true };

        DialogService.Show<Components.AddTaskDialog>("Edit Task", parameters, options);
    }

    public async Task OnTaskRowClicked(AgileMinds.Shared.Models.Task task)
    {
        OpenEditTaskDialog(task);
    }

    public string GetStatusStyle(string status)
    {
        return status switch
        {
            "Pending" => "background-color:var(--mud-palette-error-lighten) !important; width: 100px;",
            "InProgress" => "background-color:var(--mud-palette-warning-darken) !important; width: 100px;",
            "Completed" => "background-color:var(--mud-palette-success-darken) !important; width: 100px;",
            _ => "background-color:var(--mud-palette-default) !important;"
        };
   }

    private Dictionary<string, int> TaskPriorities = new Dictionary<string, int>
     {
         { "Low", 0 },
         { "Medium", 1 },
         { "High", 2 }
     };
    private Dictionary<string, int> RolesMapping = new Dictionary<string, int>
     {
         { "Owner", 0 },
         { "Member", 1 }
     };

}
